{"version":3,"sources":["TodoApp.js","serviceWorker.js","index.js"],"names":["TodoApp","state","tableColumn","tableData","beforeText","afterText","splitTextNewLine","data","split","map","line","idx","key","className","onClick","e","preventDefault","str","listener","clipboardData","setData","innerHTML","console","log","__proto__","document","addEventListener","execCommand","removeEventListener","copyToClip","getElementById","id","columnName","row","columnItem","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNA4FeA,MA1Ff,WACE,IAAMC,EAAQ,CACZC,YAAa,CAAC,OAAQ,UAAW,OACjCC,UAAW,CACT,CAAC,WAAW,EAAM,IAClB,CAAC,WAAW,EAAO,IACnB,CAAC,WAAW,EAAO,IACnB,CAAC,WAAW,EAAO,GACnB,CAAC,WAAW,EAAO,KAErBC,WAAW,6gBAMXC,UAAU,qcA6BNC,EAAmB,SAASC,GAChC,OAAOA,EAAKC,MAAM,MAAMC,KAAI,SAACC,EAAMC,GACjC,OACE,0BAAMC,IAAKD,GACRD,EACD,kCAMR,OACE,yBAAKG,UAAU,OACb,4BAAQC,QAlCZ,SAAqBC,GACnBA,EAAEC,iBAIJ,SAAoBC,GAClB,SAASC,EAASH,GAChBA,EAAEI,cAAcC,QAAQ,YAAaH,EAAII,WACzCN,EAAEI,cAAcC,QAAQ,aAAcH,EAAII,WAC1CC,QAAQC,IAAIR,EAAEI,cAAcK,WAE5BT,EAAEC,iBAKJS,SAASC,iBAAiB,OAAQR,GAClCO,SAASE,YAAY,QACrBF,SAASG,oBAAoB,OAAQV,GAhBrCW,CAAWJ,SAASK,eAAe,eAgCjC,aAEA,yBAAKC,GAAG,YACN,yBAAKlB,UAAU,gBAAgBP,EAAiBL,EAAMG,aACtD,2BAAO2B,GAAG,iBACR,+BACE,4BACG9B,EAAMC,YAAYO,KAAI,SAACuB,EAAYrB,GAClC,OAAO,wBAAIC,IAAKD,GAAMqB,QAI5B,+BACG/B,EAAME,UAAUM,KAAI,SAACwB,EAAKtB,GACzB,OACE,wBAAIC,IAAKqB,EAAM,GAAKtB,GACjBsB,EAAIxB,KAAI,SAACyB,EAAYvB,GACpB,OACE,wBAAIC,IAAKsB,EAAa,GAAKvB,GAAMuB,EAAa,aAQ5D,yBAAKrB,UAAU,gBAAgBP,EAAiBL,EAAMI,eC1E1C8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAahB,SAASK,eAAe,SD6H/C,kBAAmBY,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d93e4ceb.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction TodoApp() {\n  const state = {\n    tableColumn: [\"name\", \"married\", \"age\"],\n    tableData: [\n      [\"person1\", true, 50],\n      [\"person2\", false, 14],\n      [\"person3\", false, 14],\n      [\"person3\", false, 1],\n      [\"person3\", false, 10]\n    ],\n    beforeText: `안녕하세요.\n    여기서 e는 합성 이벤트입니다.\n\nReact는 W3C 명세에 따라 합성 이벤트를 정의하기 때문에 브라우저 호환성에 대해 걱정할 필요가 없습니다. \n더 자세한 사항은 합성 이벤트를 참고하시기 바랍니다.\n    `,\n    afterText: `\nReact를 사용할 때 DOM 엘리먼트가 생성된 후 리스너를 추가하기 위해 \naddEventListener를 호출할 필요가 없습니다. 대신, 엘리먼트가 처음 렌더링될 때 리스너를 제공하면 됩니다.\n\n감사합니다.\n`\n  };\n\n  function clickButton(e) {\n    e.preventDefault();\n    copyToClip(document.getElementById(\"contents\"));\n  }\n\n  function copyToClip(str) {\n    function listener(e) {\n      e.clipboardData.setData(\"text/html\", str.innerHTML);\n      e.clipboardData.setData(\"text/plain\", str.innerHTML);\n      console.log(e.clipboardData.__proto__);\n      // e.clipboardData.style(\"cssText\", \"color: blue;\")\n      e.preventDefault();\n    }\n    // div.innerHTML = \"your div content\";\n    // div.style.cssText = document.defaultView.getComputedStyle(p, \"\").cssText;\n\n    document.addEventListener(\"copy\", listener);\n    document.execCommand(\"copy\");\n    document.removeEventListener(\"copy\", listener);\n  }\n\n  const splitTextNewLine = function(data) {\n    return data.split(\"\\n\").map((line, idx) => {\n      return (\n        <span key={idx}>\n          {line}\n          <br />\n        </span>\n      );\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={clickButton}>Copy Data</button>\n\n      <div id=\"contents\">\n        <div className=\"content-text\">{splitTextNewLine(state.beforeText)}</div>\n        <table id=\"tableContents\">\n          <thead>\n            <tr>\n              {state.tableColumn.map((columnName, idx) => {\n                return <th key={idx}>{columnName}</th>;\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {state.tableData.map((row, idx) => {\n              return (\n                <tr key={row + \"\" + idx}>\n                  {row.map((columnItem, idx) => {\n                    return (\n                      <td key={columnItem + \"\" + idx}>{columnItem + \"\"}</td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <div className=\"content-text\">{splitTextNewLine(state.afterText)}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default TodoApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoApp from './TodoApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}